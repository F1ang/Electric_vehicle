<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\lks07x_Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\lks07x_Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Oct 07 11:02:12 2025
<BR><P>
<H3>Maximum Stack Usage =        344 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
InitEPWM0ChargeEnd &rArr; MCPWM_ch012_init &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[19]">CAN0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">CAN0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">ADC0_IRQHandler</a> from interrupt.o(i.ADC0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[15]">ADC1_IRQHandler</a> from interrupt.o(i.ADC1_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[26]">AcquireBmefSamplingResultsM0</a> from hal_def.o(i.AcquireBmefSamplingResultsM0) referenced from hal_def.o(.constdata)
 <LI><a href="#[23]">AcquireCurSamplingResultsM0</a> from hal_def.o(i.AcquireCurSamplingResultsM0) referenced from hal_def.o(.constdata)
 <LI><a href="#[25]">AcquireNTCSamplingResultsM0</a> from hal_def.o(i.AcquireNTCSamplingResultsM0) referenced from hal_def.o(.constdata)
 <LI><a href="#[24]">AcquireVdcSamplingResultsM0</a> from hal_def.o(i.AcquireVdcSamplingResultsM0) referenced from hal_def.o(.constdata)
 <LI><a href="#[19]">CAN0_IRQHandler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[1e]">CL0_IRQHandler</a> from interrupt.o(i.CL0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[13]">CMP_IRQHandler</a> from interrupt.o(i.CMP_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[27]">ChangeADChanelCFGM0</a> from hal_def.o(i.ChangeADChanelCFGM0) referenced from hal_def.o(.constdata)
 <LI><a href="#[2d]">ClrEPWM0_breakInStatus</a> from hal_def.o(i.ClrEPWM0_breakInStatus) referenced from hal_def.o(.constdata)
 <LI><a href="#[18]">DMA0_IRQHandler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[12]">DSP0_IRQHandler</a> from interrupt.o(i.DSP0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[2a]">EPWM0_Charge</a> from hal_def.o(i.EPWM0_Charge) referenced from hal_def.o(.constdata)
 <LI><a href="#[29]">EPWM0_OutPut</a> from hal_def.o(i.EPWM0_OutPut) referenced from hal_def.o(.constdata)
 <LI><a href="#[e]">GPIO_IRQHandler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[2c]">GetEPWM0_breakInStatus</a> from hal_def.o(i.GetEPWM0_breakInStatus) referenced from hal_def.o(.constdata)
 <LI><a href="#[f]">HALL0_IRQHandler</a> from interrupt.o(i.HALL0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from interrupt.o(i.HardFault_Handler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[c]">I2C0_IRQHandler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[2b]">InitEPWM0ChargeEnd</a> from hal_def.o(i.InitEPWM0ChargeEnd) referenced from hal_def.o(.constdata)
 <LI><a href="#[16]">MCPWM0_IRQHandler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[28]">MCPWM0_RegUpdate</a> from hal_def.o(i.MCPWM0_RegUpdate) referenced from hal_def.o(.constdata)
 <LI><a href="#[17]">MCPWM1_IRQHandler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[1d]">PWRDN_IRQHandler</a> from interrupt.o(i.PWRDN_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[a]">QEP0_IRQHandler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[b]">QEP1_IRQHandler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[1a]">SIF0_IRQHandler</a> from interrupt.o(i.SIF0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[d]">SPI0_IRQHandler</a> from interrupt.o(i.SPI0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[22]">SVPWM_2ShuntGetPhaseIaIb</a> from focdef.o(i.SVPWM_2ShuntGetPhaseIaIb) referenced from focdef.o(i.InitMotorDriveLayer)
 <LI><a href="#[2e]">SVPWM_2Shunt_En1</a> from fluxobserve.o(i.SVPWM_2Shunt_En1) referenced from focdef.o(.constdata)
 <LI><a href="#[1c]">SW_IRQHandler</a> from interrupt.o(i.SW_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from interrupt.o(i.SysTick_Handler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from hardware_init.o(i.SystemInit) referenced from startup_lks32mc07x.o(.text)
 <LI><a href="#[6]">TIMER0_IRQHandler</a> from interrupt.o(i.TIMER0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[7]">TIMER1_IRQHandler</a> from interrupt.o(i.TIMER1_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[8]">TIMER2_IRQHandler</a> from interrupt.o(i.TIMER2_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[9]">TIMER3_IRQHandler</a> from interrupt.o(i.TIMER3_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[10]">UART0_IRQHandler</a> from interrupt.o(i.UART0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[11]">UART1_IRQHandler</a> from interrupt.o(i.UART1_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[1b]">WAKE_IRQHandler</a> from interrupt.o(i.WAKE_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lks32mc07x.o(.text)
 <LI><a href="#[1f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(.text)
</UL>
<P><STRONG><a name="[10d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[10f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[110]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[31]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[111]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[112]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>MCPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>MCPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>QEP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>QEP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAcrParaMALayer
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetReadPWM0
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDeadTime
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDQCurRefGenWithWeakenFlux
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateObserPLLVar1msLoop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcVectorVFPara
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFluxObservePara
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_ldivmod</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateSVPWMParaMALayer
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPWMPrd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcVectorVFPara
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseMD2MAInfor
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFluxObservePara
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPIRegulator
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseMD2MAInfor
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFluxObservePara
</UL>

<P><STRONG><a name="[115]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCurRefGenValue
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>

<P><STRONG><a name="[116]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UA_StateMachine
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_StructInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInitTask
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_StructInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_StructInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGlobalPhyObj
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInitTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFocVar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUACtrlObj
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerSubBlock2MACrtlProc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f8]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[30]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[11b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[11c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>Read_Trim</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lks32mc08x_nvr.o(.text.Read_Trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempSensor_Init
</UL>

<P><STRONG><a name="[14]"></a>ADC0_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, interrupt.o(i.ADC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ADC0_IRQHandler &rArr; AdcEocIsrDRV0 &rArr; FOC_Model &rArr; PmsmFluxObserve_Full &rArr; Calc_Atan
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPhaseCur_V
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPhaseCur_U
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElectSpdEst
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElectAngleEst
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEocIsrDRV0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ADC0_init</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, hardware_init.o(i.ADC0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC0_init &rArr; ADC_Init &rArr; Read_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearIRQFlag
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_2Shunt_NormalModeCFG
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEPWM0ChargeEnd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetReadPWM0
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[15]"></a>ADC1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, interrupt.o(i.ADC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ADC1_init</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, hardware_init.o(i.ADC1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC1_init &rArr; ADC_Init &rArr; Read_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearIRQFlag
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_2Shunt_NormalModeCFG
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEPWM0ChargeEnd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[48]"></a>ADC_2Shunt_NormalModeCFG</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, hal_def.o(i.ADC_2Shunt_NormalModeCFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_2Shunt_NormalModeCFG &rArr; ADC_CHN_GAIN_CFG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CHN_GAIN_CFG
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[4a]"></a>ADC_CHN_GAIN_CFG</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lks32mc07x_adc.o(i.ADC_CHN_GAIN_CFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CHN_GAIN_CFG
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_2Shunt_NormalModeCFG
</UL>

<P><STRONG><a name="[47]"></a>ADC_ClearIRQFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lks32mc07x_adc.o(i.ADC_ClearIRQFlag))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[46]"></a>ADC_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, lks32mc07x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Init &rArr; Read_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[68]"></a>ADC_SoftTrgEN</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lks32mc07x_adc.o(i.ADC_SoftTrgEN))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetReadPWM0
</UL>

<P><STRONG><a name="[45]"></a>ADC_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lks32mc07x_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>

<P><STRONG><a name="[26]"></a>AcquireBmefSamplingResultsM0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_def.o(i.AcquireBmefSamplingResultsM0))
<BR>[Address Reference Count : 1]<UL><LI> hal_def.o(.constdata)
</UL>
<P><STRONG><a name="[23]"></a>AcquireCurSamplingResultsM0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_def.o(i.AcquireCurSamplingResultsM0))
<BR>[Address Reference Count : 1]<UL><LI> hal_def.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>AcquireNTCSamplingResultsM0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_def.o(i.AcquireNTCSamplingResultsM0))
<BR>[Address Reference Count : 1]<UL><LI> hal_def.o(.constdata)
</UL>
<P><STRONG><a name="[24]"></a>AcquireVdcSamplingResultsM0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_def.o(i.AcquireVdcSamplingResultsM0))
<BR>[Address Reference Count : 1]<UL><LI> hal_def.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>AdcEocIsrDRV0</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, foc_drive.o(i.AdcEocIsrDRV0))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AdcEocIsrDRV0 &rArr; FOC_Model &rArr; PmsmFluxObserve_Full &rArr; Calc_Atan
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>App2CoreCurTrans</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comfuncs.o(i.App2CoreCurTrans))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAcrParaMALayer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInitTask
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateAlign
</UL>

<P><STRONG><a name="[5a]"></a>App2CoreFreqTrans</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comfuncs.o(i.App2CoreFreqTrans))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinMotorVoltSpd2Core
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInitTask
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleIfMotorSpdZero
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSpdSetpointRamp
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFluxObservePara
</UL>

<P><STRONG><a name="[88]"></a>App2CoreVoltTrans</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comfuncs.o(i.App2CoreVoltTrans))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinMotorVoltSpd2Core
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRecoverInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltFaultInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitPowerOnFinish
</UL>

<P><STRONG><a name="[fb]"></a>AutoFieldWeakRegUpdate</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, fluxobserve.o(i.AutoFieldWeakRegUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AutoFieldWeakRegUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDCurRefGenWithEnWeakenFlux
</UL>

<P><STRONG><a name="[4e]"></a>BondingMotorDrvObject</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pubdata_driverinstance.o(i.BondingMotorDrvObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BondingMotorDrvObject &rArr; initGlobalPhyObj
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGlobalPhyObj
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigData_check
</UL>

<P><STRONG><a name="[101]"></a>BrakeStateCheckInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, onthefly.o(i.BrakeStateCheckInit))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[1e]"></a>CL0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.CL0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CMP_Cmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lks32mc07x_cmp.o(i.CMP_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMP_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
</UL>

<P><STRONG><a name="[13]"></a>CMP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.CMP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CMP_Init</STRONG> (Thumb, 310 bytes, Stack size 20 bytes, lks32mc07x_cmp.o(i.CMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CMP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
</UL>

<P><STRONG><a name="[51]"></a>CMP_StructInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lks32mc07x_cmp.o(i.CMP_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMP_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
</UL>

<P><STRONG><a name="[53]"></a>CMP_init</STRONG> (Thumb, 96 bytes, Stack size 96 bytes, hardware_init.o(i.CMP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CMP_init &rArr; CMP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_StructInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[70]"></a>CalcDcVoltPerUnit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fluxobserve.o(i.CalcDcVoltPerUnit))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[5b]"></a>CalcVectorVFPara</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, fluxobserve.o(i.CalcVectorVFPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CalcVectorVFPara &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkNomData
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_mulss
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDHandleCmdIn1msLoop
</UL>

<P><STRONG><a name="[77]"></a>CalcVolCircle</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, fluxobserve.o(i.CalcVolCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalcVolCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[d3]"></a>Calc_Atan</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, fluxobserve.o(i.Calc_Atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Calc_Atan
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmsmFluxObserve_Full
</UL>

<P><STRONG><a name="[27]"></a>ChangeADChanelCFGM0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_def.o(i.ChangeADChanelCFGM0))
<BR>[Address Reference Count : 1]<UL><LI> hal_def.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>ChargeDriverMain</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main_drive.o(i.ChargeDriverMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ChargeDriverMain &rArr; StateCharge &rArr; StateInit &rArr; InitDQCurRefGenWithWeakenFlux &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWMStatMA2UA
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCharge
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[5f]"></a>Clock_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hardware_init.o(i.Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clock_Init &rArr; SoftDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2d]"></a>ClrEPWM0_breakInStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_def.o(i.ClrEPWM0_breakInStatus))
<BR>[Address Reference Count : 1]<UL><LI> hal_def.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>ConfigData_check</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, system_init.o(i.ConfigData_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ConfigData_check &rArr; BondingMotorDrvObject &rArr; initGlobalPhyObj
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLibMaxObjNumber
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkParaCfgValid
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BondingMotorDrvObject
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>Core2AppCurTrans</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comfuncs.o(i.Core2AppCurTrans))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMAInfo2UALocal
</UL>

<P><STRONG><a name="[10b]"></a>Core2AppFreqTrans</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comfuncs.o(i.Core2AppFreqTrans))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMAInfo2UALocal
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateObserPLLVar1msLoop
</UL>

<P><STRONG><a name="[107]"></a>Core2AppPowerTrans</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comfuncs.o(i.Core2AppPowerTrans))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseMD2MAInfor
</UL>

<P><STRONG><a name="[109]"></a>Core2AppVolTrans</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comfuncs.o(i.Core2AppVolTrans))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMAInfo2UALocal
</UL>

<P><STRONG><a name="[fa]"></a>CountLeadZero</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, comfuncs.o(i.CountLeadZero))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkNomData
</UL>

<P><STRONG><a name="[64]"></a>CurrentOffsetCalibration</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, system_init.o(i.CurrentOffsetCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CurrentOffsetCalibration &rArr; CurrentOffsetReadPWM0 &rArr; ADC0_init &rArr; ADC_Init &rArr; Read_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCtrlObjectPtr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetReadPWM0
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[76]"></a>CurrentPIRegulator</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, focdef.o(i.CurrentPIRegulator))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CurrentPIRegulator
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmsmFluxObserve_Full
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[69]"></a>DAC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lks32mc07x_dac.o(i.DAC_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_init
</UL>

<P><STRONG><a name="[6a]"></a>DAC_Init</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, lks32mc07x_dac.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DAC_Init &rArr; Read_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_init
</UL>

<P><STRONG><a name="[6e]"></a>DAC_OutputValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lks32mc07x_dac.o(i.DAC_OutputValue))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_init
</UL>

<P><STRONG><a name="[6b]"></a>DAC_StructInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lks32mc07x_dac.o(i.DAC_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_init
</UL>

<P><STRONG><a name="[6c]"></a>DAC_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hardware_init.o(i.DAC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DAC_init &rArr; DAC_Init &rArr; Read_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_StructInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_OutputValue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCfgParaPtr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[12]"></a>DSP0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.DSP0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DSP_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lks32mc07x_dsp.o(i.DSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[aa]"></a>Div_Functions</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_math.o(i.Div_Functions))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIPD
</UL>

<P><STRONG><a name="[2a]"></a>EPWM0_Charge</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hal_def.o(i.EPWM0_Charge))
<BR>[Address Reference Count : 1]<UL><LI> hal_def.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>EPWM0_OutPut</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_def.o(i.EPWM0_OutPut))
<BR>[Address Reference Count : 1]<UL><LI> hal_def.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>FaultCheck</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, fault_detection.o(i.FaultCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FaultCheck &rArr; FaultStallCheck &rArr; getMotorActVoltFromObjId1ms &rArr; IQ15SqrtIQ31
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultVoltageCheck
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStartCheck
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStallCheck
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultPhaseCheck
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultEmptyCheck
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCurrentCheckMA
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAmplitudeCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACtrlObjTask
</UL>

<P><STRONG><a name="[83]"></a>FaultInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fault_detection.o(i.FaultInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FaultInit &rArr; FaultInitTask
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInitTask
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltFaultInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotorMain
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDriverMain
</UL>

<P><STRONG><a name="[85]"></a>FaultInitTask</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, fault_detection.o(i.FaultInitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FaultInitTask
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreCurTrans
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotorMain
</UL>

<P><STRONG><a name="[87]"></a>FaultRecoverInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fault_detection.o(i.FaultRecoverInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FaultRecoverInit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreVoltTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotorMain
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDriverMain
</UL>

<P><STRONG><a name="[8c]"></a>FluxObserveParaCalc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fluxobserve.o(i.FluxObserveParaCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FluxObserveParaCalc &rArr; CalcFluxObservePara &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFluxObservePara
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDHandleCmdIn1msLoop
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lks32mc07x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[8e]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, lks32mc07x_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_PinAFConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[90]"></a>GPIO_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lks32mc07x_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, hardware_init.o(i.GPIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GPIO_init &rArr; GPIO_PinAFConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[2c]"></a>GetEPWM0_breakInStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_def.o(i.GetEPWM0_breakInStatus))
<BR>[Address Reference Count : 1]<UL><LI> hal_def.o(.constdata)
</UL>
<P><STRONG><a name="[f]"></a>HALL0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.HALL0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>HALL_Cmd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lks32mc07x_hall.o(i.HALL_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HALL_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_init
</UL>

<P><STRONG><a name="[94]"></a>HALL_Init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lks32mc07x_hall.o(i.HALL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_init
</UL>

<P><STRONG><a name="[93]"></a>HALL_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lks32mc07x_hall.o(i.HALL_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_init
</UL>

<P><STRONG><a name="[92]"></a>HALL_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hardware_init.o(i.HALL_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HALL_init &rArr; HALL_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_StructInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>Hardware_init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, hardware_init.o(i.Hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Hardware_init &rArr; MCPWM_ch012_init &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempSensor_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_DISABLE
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTimer_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_ch012_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>IQ15SqrtIQ31</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, fluxobserve.o(i.IQ15SqrtIQ31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IQ15SqrtIQ31
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorCurFromObjId1ms
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorActVoltFromObjId1ms
</UL>

<P><STRONG><a name="[98]"></a>IWDG_DISABLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lks32mc07x_sys.o(i.IWDG_DISABLE))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[a3]"></a>InitDQCurRefGenWithWeakenFlux</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, fluxobserve.o(i.InitDQCurRefGenWithWeakenFlux))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InitDQCurRefGenWithWeakenFlux &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
</UL>

<P><STRONG><a name="[a4]"></a>InitDriverMain</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main_drive.o(i.InitDriverMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = InitDriverMain &rArr; motorControlParaInitDone &rArr; InitSVPWMDone &rArr; updateSVPWMParaMALayer &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRecoverInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControlParaInitDone
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleIfMotorSpdZero
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultMA2MD
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[2b]"></a>InitEPWM0ChargeEnd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hal_def.o(i.InitEPWM0ChargeEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = InitEPWM0ChargeEnd &rArr; MCPWM_ch012_init &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_ch012_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_def.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>InitFocVar</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, focdef.o(i.InitFocVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitFocVar
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDHandleCmdIn1msLoop
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[a9]"></a>InitIPD</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, lib_ipd.o(i.InitIPD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitIPD
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Div_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDHandleCmdIn1msLoop
</UL>

<P><STRONG><a name="[ab]"></a>InitMotorAppLayer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ma_interface.o(i.InitMotorAppLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = InitMotorAppLayer &rArr; initMACtrlObj &rArr; initMACtrProc &rArr; updateSVPWMParaMALayer &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMACtrlObj
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[ad]"></a>InitMotorDriveLayer</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, focdef.o(i.InitMotorDriveLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitMotorDriveLayer &rArr; RegisterObsDatStr
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setOverModuFac
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterObsDatStr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[7a]"></a>InitPmFluxOB</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, fluxobserve.o(i.InitPmFluxOB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitPmFluxOB
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDHandleCmdIn1msLoop
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[b4]"></a>InitUsrAppLayer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ua_interface.o(i.InitUsrAppLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitUsrAppLayer &rArr; initUACtrlObj
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUACtrlObj
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[dd]"></a>IsNeedIPD</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, state_machine.o(i.IsNeedIPD))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateAlign
</UL>

<P><STRONG><a name="[b6]"></a>MACtrlObjTask</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ma_interface.o(i.MACtrlObjTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MACtrlObjTask &rArr; handleMAStateMachine &rArr; StopMotorMain &rArr; motorControlParaInitDone &rArr; InitSVPWMDone &rArr; updateSVPWMParaMALayer &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[28]"></a>MCPWM0_RegUpdate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal_def.o(i.MCPWM0_RegUpdate))
<BR>[Address Reference Count : 1]<UL><LI> hal_def.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>MCPWM_Init</STRONG> (Thumb, 1190 bytes, Stack size 24 bytes, lks32mc07x_mcpwm.o(i.MCPWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_ch012_init
</UL>

<P><STRONG><a name="[b9]"></a>MCPWM_StructInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lks32mc07x_mcpwm.o(i.MCPWM_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCPWM_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_ch012_init
</UL>

<P><STRONG><a name="[9a]"></a>MCPWM_ch012_init</STRONG> (Thumb, 214 bytes, Stack size 248 bytes, hardware_init.o(i.MCPWM_ch012_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = MCPWM_ch012_init &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_StructInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerEPWM0_DrvLevel
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPWMPrd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDeadTime
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCfgParaPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitEPWM0ChargeEnd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[c0]"></a>MDtaskHandleIn1msLoop</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, foc_drive.o(i.MDtaskHandleIn1msLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MDtaskHandleIn1msLoop &rArr; MDHandleCmdIn1msLoop &rArr; FluxObserveParaCalc &rArr; CalcFluxObservePara &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vectorVFcontrol
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateObserPLLVar1msLoop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOnFlyFreqResultFromObjId
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorQaxisVoltFormObjId
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorPowerFromObjId
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorDaxisVoltFormObjId
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorCurFromObjId1ms
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorActVoltFromObjId1ms
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmsmFluxObserve1ms
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDHandleCmdIn1msLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[c8]"></a>MinMotorVoltSpd2Core</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ma_interface.o(i.MinMotorVoltSpd2Core))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MinMotorVoltSpd2Core
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreVoltTrans
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMACtrPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
</UL>

<P><STRONG><a name="[ca]"></a>MotorAlignMain</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main_drive.o(i.MotorAlignMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MotorAlignMain &rArr; StateAlign &rArr; ramp32GenCalc
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWMStatMA2UA
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateAlign
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[cc]"></a>MotorBreakMain</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main_drive.o(i.MotorBreakMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorBreakMain
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWMStatMA2UA
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[cd]"></a>MotorCloseMain</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main_drive.o(i.MotorCloseMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MotorCloseMain &rArr; StateRun &rArr; SpeedPIRegulator &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWMStatMA2UA
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleIfMotorSpdZero
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[cf]"></a>MotorFaultMain</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main_drive.o(i.MotorFaultMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorFaultMain
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWMStatMA2UA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFaultStatMA2UA
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[d2]"></a>OPA_Init</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, lks32mc07x_opa.o(i.OPA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OPA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_init
</UL>

<P><STRONG><a name="[d1]"></a>OPA_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lks32mc07x_opa.o(i.OPA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_init
</UL>

<P><STRONG><a name="[9c]"></a>PGA_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hardware_init.o(i.PGA_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PGA_init &rArr; OPA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPA_StructInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPA_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCfgParaPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[67]"></a>PWMOutputs</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lks32mc07x_mcpwm.o(i.PWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetReadPWM0
</UL>

<P><STRONG><a name="[1d]"></a>PWRDN_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.PWRDN_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>PmsmFluxObserve1ms</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, fluxobserve.o(i.PmsmFluxObserve1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PmsmFluxObserve1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDtaskHandleIn1msLoop
</UL>

<P><STRONG><a name="[78]"></a>PmsmFluxObserve_Full</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, fluxobserve.o(i.PmsmFluxObserve_Full))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PmsmFluxObserve_Full &rArr; Calc_Atan
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentPIRegulator
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_Atan
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[d4]"></a>QCurRefGenValue</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fluxobserve.o(i.QCurRefGenValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QCurRefGenValue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
</UL>

<P><STRONG><a name="[ae]"></a>RegisterObsDatStr</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, fluxobserve.o(i.RegisterObsDatStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegisterObsDatStr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMotorDriveLayer
</UL>

<P><STRONG><a name="[d5]"></a>SEGGER_RTT_ConfigUpBuffer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_ConfigUpBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[43]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[1a]"></a>SIF0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SIF0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SPI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SVPWM_2ShuntGetPhaseIaIb</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, focdef.o(i.SVPWM_2ShuntGetPhaseIaIb))
<BR>[Address Reference Count : 1]<UL><LI> focdef.o(i.InitMotorDriveLayer)
</UL>
<P><STRONG><a name="[2e]"></a>SVPWM_2Shunt_En1</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, fluxobserve.o(i.SVPWM_2Shunt_En1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SVPWM_2Shunt_En1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> focdef.o(.constdata)
</UL>
<P><STRONG><a name="[1c]"></a>SW_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SW_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SYS_AnalogModuleClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lks32mc07x_sys.o(i.SYS_AnalogModuleClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_Cmd
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempSensor_Init
</UL>

<P><STRONG><a name="[54]"></a>SYS_ModuleClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lks32mc07x_sys.o(i.SYS_ModuleClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
</UL>

<P><STRONG><a name="[73]"></a>SetCmprDuty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, focdef.o(i.SetCmprDuty))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[dc]"></a>SetDCurRefInitValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fluxobserve.o(i.SetDCurRefInitValue))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateAlign
</UL>

<P><STRONG><a name="[60]"></a>SoftDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hardware_init.o(i.SoftDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>

<P><STRONG><a name="[db]"></a>SpeedPIRegulator</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, pid_regulators.o(i.SpeedPIRegulator))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SpeedPIRegulator &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
</UL>

<P><STRONG><a name="[e4]"></a>StopMotorMain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, main_drive.o(i.StopMotorMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = StopMotorMain &rArr; motorControlParaInitDone &rArr; InitSVPWMDone &rArr; updateSVPWMParaMALayer &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRecoverInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInitTask
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWMStatMA2UA
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControlParaInitDone
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleIfMotorSpdZero
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDefaultMA2MD
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, hardware_init.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; Clock_Init &rArr; SoftDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, interrupt.o(i.TIMER0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.TIMER1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.TIMER2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.TIMER3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>TIM_TimerCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lks32mc07x_tim.o(i.TIM_TimerCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTimer_init
</UL>

<P><STRONG><a name="[e5]"></a>TIM_TimerInit</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, lks32mc07x_tim.o(i.TIM_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTimer_init
</UL>

<P><STRONG><a name="[f5]"></a>TIM_TimerStrutInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lks32mc07x_tim.o(i.TIM_TimerStrutInit))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTimer_init
</UL>

<P><STRONG><a name="[e6]"></a>Task_Scheduler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, task_scheduler.o(i.Task_Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Task_Scheduler &rArr; MACtrlObjTask &rArr; handleMAStateMachine &rArr; StopMotorMain &rArr; motorControlParaInitDone &rArr; InitSVPWMDone &rArr; updateSVPWMParaMALayer &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDtaskHandleIn1msLoop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UACtrlObjTask
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACtrlObjTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>TempSensor_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lks32mc07x_tmp.o(i.TempSensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TempSensor_Init &rArr; Read_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[e7]"></a>UACtrlObjTask</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ua_interface.o(i.UACtrlObjTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UACtrlObjTask &rArr; UA_StateMachine &rArr; UARunCmdHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;downloadParaHandle
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UA_StateMachine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkifUARunning
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[10]"></a>UART0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, interrupt.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>UART_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lks32mc07x_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
</UL>

<P><STRONG><a name="[ef]"></a>UART_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lks32mc07x_uart.o(i.UART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
</UL>

<P><STRONG><a name="[99]"></a>UART_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, hardware_init.o(i.UART_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_init &rArr; UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[e8]"></a>UA_StateMachine</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, ua_statemachine.o(i.UA_StateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UA_StateMachine &rArr; UARunCmdHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkIfDownload
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateUASetpoint
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFaultBrakeMode4UA
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBrakeMode4UA
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARunCmdHandle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UAFaultStopHandle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UACtrlObjTask
</UL>

<P><STRONG><a name="[9b]"></a>UTimer_init</STRONG> (Thumb, 60 bytes, Stack size 152 bytes, hardware_init.o(i.UTimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UTimer_init &rArr; TIM_TimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerStrutInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[84]"></a>VoltFaultInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fault_detection.o(i.VoltFaultInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VoltFaultInit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreVoltTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
</UL>

<P><STRONG><a name="[1b]"></a>WAKE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.WAKE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>__ARM_common_ll_mulss</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fluxobserve.o(i.__ARM_common_ll_mulss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_common_ll_mulss
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateSVPWMParaMALayer
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPWMPrd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSpdSetpointRamp
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcVectorVFPara
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseMD2MAInfor
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFluxObservePara
</UL>

<P><STRONG><a name="[59]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fluxobserve.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFluxObservePara
</UL>

<P><STRONG><a name="[72]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lks32mc07x_gpio.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[11d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[11e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[11f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[f4]"></a>checkIfDownload</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pubdata_driverinstance.o(i.checkIfDownload))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UA_StateMachine
</UL>

<P><STRONG><a name="[58]"></a>checkNomData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fluxobserve.o(i.checkNomData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checkNomData
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountLeadZero
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcVectorVFPara
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcFluxObservePara
</UL>

<P><STRONG><a name="[62]"></a>checkParaCfgValid</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pubdata_driverinstance.o(i.checkParaCfgValid))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigData_check
</UL>

<P><STRONG><a name="[e9]"></a>checkifUARunning</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ua_interface.o(i.checkifUARunning))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UACtrlObjTask
</UL>

<P><STRONG><a name="[ea]"></a>downloadParaHandle</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, pubdata_driverinstance.o(i.downloadParaHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = downloadParaHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UACtrlObjTask
</UL>

<P><STRONG><a name="[f3]"></a>getBrakeMode4UA</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ua_usrapp.o(i.getBrakeMode4UA))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UA_StateMachine
</UL>

<P><STRONG><a name="[6d]"></a>getCfgParaPtr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pubdata_driverinstance.o(i.getCfgParaPtr))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_ch012_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_init
</UL>

<P><STRONG><a name="[65]"></a>getCtrlObjectPtr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pubdata_driverinstance.o(i.getCtrlObjectPtr))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUACtrlObj
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerSubBlock2MACrtlProc
</UL>

<P><STRONG><a name="[75]"></a>getCurLoopCloseStatusFromOB</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fluxobserve.o(i.getCurLoopCloseStatusFromOB))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[e3]"></a>getDCurRefGenWithEnWeakenFlux</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fluxobserve.o(i.getDCurRefGenWithEnWeakenFlux))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getDCurRefGenWithEnWeakenFlux &rArr; AutoFieldWeakRegUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoFieldWeakRegUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
</UL>

<P><STRONG><a name="[bb]"></a>getDeadTime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pubdata_md_ma.o(i.getDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = getDeadTime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateSVPWMParaMALayer
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_ch012_init
</UL>

<P><STRONG><a name="[40]"></a>getElectAngleEst</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fluxobserve.o(i.getElectAngleEst))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[3f]"></a>getElectSpdEst</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fluxobserve.o(i.getElectSpdEst))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>getFaultBrakeMode4UA</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ua_usrapp.o(i.getFaultBrakeMode4UA))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UAFaultStopHandle
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UA_StateMachine
</UL>

<P><STRONG><a name="[f1]"></a>getGearRatio4UA</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ua_usrapp.o(i.getGearRatio4UA))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARunCmdHandle
</UL>

<P><STRONG><a name="[63]"></a>getLibMaxObjNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fluxobserve.o(i.getLibMaxObjNumber))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigData_check
</UL>

<P><STRONG><a name="[c9]"></a>getMACtrPtr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ma_static_variable.o(i.getMACtrPtr))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinMotorVoltSpd2Core
</UL>

<P><STRONG><a name="[8b]"></a>getMotorActVoltFromObjId1ms</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, focdef.o(i.getMotorActVoltFromObjId1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getMotorActVoltFromObjId1ms &rArr; IQ15SqrtIQ31
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ15SqrtIQ31
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorQaxisVoltFormObjId
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorDaxisVoltFormObjId
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDtaskHandleIn1msLoop
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStallCheck
</UL>

<P><STRONG><a name="[89]"></a>getMotorCurFromObjId1ms</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, focdef.o(i.getMotorCurFromObjId1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getMotorCurFromObjId1ms &rArr; IQ15SqrtIQ31
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ15SqrtIQ31
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDtaskHandleIn1msLoop
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStallCheck
</UL>

<P><STRONG><a name="[c1]"></a>getMotorDaxisVoltFormObjId</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fluxobserve.o(i.getMotorDaxisVoltFormObjId))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorActVoltFromObjId1ms
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDtaskHandleIn1msLoop
</UL>

<P><STRONG><a name="[c3]"></a>getMotorPowerFromObjId</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fluxobserve.o(i.getMotorPowerFromObjId))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDtaskHandleIn1msLoop
</UL>

<P><STRONG><a name="[c2]"></a>getMotorQaxisVoltFormObjId</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fluxobserve.o(i.getMotorQaxisVoltFormObjId))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorActVoltFromObjId1ms
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDtaskHandleIn1msLoop
</UL>

<P><STRONG><a name="[c4]"></a>getOnFlyFreqResultFromObjId</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, onthefly.o(i.getOnFlyFreqResultFromObjId))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDtaskHandleIn1msLoop
</UL>

<P><STRONG><a name="[ba]"></a>getPWMPrd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pubdata_md_ma.o(i.getPWMPrd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_mulss
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateSVPWMParaMALayer
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_ch012_init
</UL>

<P><STRONG><a name="[be]"></a>getParaVFCompCofig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pubdata_driverinstance.o(i.getParaVFCompCofig))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDHandleCmdIn1msLoop
</UL>

<P><STRONG><a name="[41]"></a>getPhaseCur_U</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, focdef.o(i.getPhaseCur_U))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[42]"></a>getPhaseCur_V</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, focdef.o(i.getPhaseCur_V))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>getRunStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fluxobserve.o(i.getRunStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
</UL>

<P><STRONG><a name="[8a]"></a>getVolt2FreqCalcPara</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fluxobserve.o(i.getVolt2FreqCalcPara))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStallCheck
</UL>

<P><STRONG><a name="[b7]"></a>handleMAStateMachine</STRONG> (Thumb, 554 bytes, Stack size 32 bytes, state_machine.o(i.handleMAStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = handleMAStateMachine &rArr; StopMotorMain &rArr; motorControlParaInitDone &rArr; InitSVPWMDone &rArr; updateSVPWMParaMALayer &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateMAInfo2UALocal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInitAcrParaReq
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotorMain
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorFaultMain
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCloseMain
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorBreakMain
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAlignMain
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDriverMain
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeDriverMain
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrakeStateCheckInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseUACmdAndSetpoint
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseMD2MAInfor
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitPowerOnFinish
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMotorRunCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFaultExists
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBreakInClrReq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACtrlObjTask
</UL>

<P><STRONG><a name="[4f]"></a>initGlobalPhyObj</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, pubdata_driverinstance.o(i.initGlobalPhyObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initGlobalPhyObj
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BondingMotorDrvObject
</UL>

<P><STRONG><a name="[104]"></a>initMACtrProc</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ma_static_variable.o(i.initMACtrProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = initMACtrProc &rArr; updateSVPWMParaMALayer &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateSVPWMParaMALayer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateObParaMALayer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAcrParaMALayer
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMACtrlObj
</UL>

<P><STRONG><a name="[ac]"></a>initMACtrlObj</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ma_interface.o(i.initMACtrlObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = initMACtrlObj &rArr; initMACtrProc &rArr; updateSVPWMParaMALayer &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerSubBlock2MACrtlProc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMACtrProc
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMotorAppLayer
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = main &rArr; Hardware_init &rArr; MCPWM_ch012_init &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigData_check
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[96]"></a>ramp32GenCalc</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, mc_math.o(i.ramp32GenCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ramp32GenCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateAlign
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSpdSetpointRamp
</UL>

<P><STRONG><a name="[e1]"></a>ramp32GenInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mc_math.o(i.ramp32GenInit))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
</UL>

<P><STRONG><a name="[bc]"></a>registerEPWM0_DrvLevel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_def.o(i.registerEPWM0_DrvLevel))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_ch012_init
</UL>

<P><STRONG><a name="[105]"></a>registerSubBlock2MACrtlProc</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ma_static_variable.o(i.registerSubBlock2MACrtlProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = registerSubBlock2MACrtlProc
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCtrlObjectPtr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMACtrlObj
</UL>

<P><STRONG><a name="[bf]"></a>setDeadCompFactor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fluxobserve.o(i.setDeadCompFactor))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDHandleCmdIn1msLoop
</UL>

<P><STRONG><a name="[e0]"></a>setInitAcrParaReq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main_drive.o(i.setInitAcrParaReq))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCharge
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[71]"></a>setLibWorkMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fluxobserve.o(i.setLibWorkMode))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[de]"></a>setOBElectAngleEst</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fluxobserve.o(i.setOBElectAngleEst))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateAlign
</UL>

<P><STRONG><a name="[10c]"></a>setObserPLLKpKi</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fluxobserve.o(i.setObserPLLKpKi))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateObserPLLVar1msLoop
</UL>

<P><STRONG><a name="[af]"></a>setOverModuFac</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fluxobserve.o(i.setOverModuFac))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMotorDriveLayer
</UL>

<P><STRONG><a name="[74]"></a>setTrakingModeDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fluxobserve.o(i.setTrakingModeDisable))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[106]"></a>sys_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system_init.o(i.sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sys_init &rArr; InitMotorAppLayer &rArr; initMACtrlObj &rArr; initMACtrProc &rArr; updateSVPWMParaMALayer &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsrAppLayer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMotorDriveLayer
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMotorAppLayer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>updateAcrParaMALayer</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, pubdata_md_ma.o(i.updateAcrParaMALayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = updateAcrParaMALayer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreCurTrans
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAcrDone
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMACtrProc
</UL>

<P><STRONG><a name="[103]"></a>updateMAInfo2UALocal</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, main_drive.o(i.updateMAInfo2UALocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = updateMAInfo2UALocal
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core2AppVolTrans
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core2AppFreqTrans
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core2AppCurTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[b1]"></a>updateObParaMALayer</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, pubdata_md_ma.o(i.updateObParaMALayer))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitObserverDone
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMACtrProc
</UL>

<P><STRONG><a name="[c6]"></a>updateObserPLLVar1msLoop</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, focdef.o(i.updateObserPLLVar1msLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = updateObserPLLVar1msLoop &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core2AppFreqTrans
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setObserPLLKpKi
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDtaskHandleIn1msLoop
</UL>

<P><STRONG><a name="[b3]"></a>updateSVPWMParaMALayer</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, pubdata_md_ma.o(i.updateSVPWMParaMALayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = updateSVPWMParaMALayer &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPWMPrd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDeadTime
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_mulss
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSVPWMDone
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMACtrProc
</UL>

<P><STRONG><a name="[ed]"></a>updateUASetpoint</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ua_usrapp.o(i.updateUASetpoint))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARunCmdHandle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UAFaultStopHandle
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UA_StateMachine
</UL>

<P><STRONG><a name="[c7]"></a>vectorVFcontrol</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, fluxobserve.o(i.vectorVFcontrol))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vectorVFcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDtaskHandleIn1msLoop
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hardware_init.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[9e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hardware_init.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[66]"></a>CurrentOffsetReadPWM0</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, system_init.o(i.CurrentOffsetReadPWM0))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CurrentOffsetReadPWM0 &rArr; ADC0_init &rArr; ADC_Init &rArr; Read_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftTrgEN
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
</UL>

<P><STRONG><a name="[4d]"></a>FOC_Model</STRONG> (Thumb, 524 bytes, Stack size 32 bytes, foc_drive.o(i.FOC_Model))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FOC_Model &rArr; PmsmFluxObserve_Full &rArr; Calc_Atan
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTrakingModeDisable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLibWorkMode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurLoopCloseStatusFromOB
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmprDuty
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmsmFluxObserve_Full
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPmFluxOB
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFocVar
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentPIRegulator
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcVolCircle
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDcVoltPerUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcEocIsrDRV0
</UL>

<P><STRONG><a name="[bd]"></a>MDHandleCmdIn1msLoop</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, foc_drive.o(i.MDHandleCmdIn1msLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MDHandleCmdIn1msLoop &rArr; FluxObserveParaCalc &rArr; CalcFluxObservePara &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getParaVFCompCofig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDeadCompFactor
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPmFluxOB
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIPD
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFocVar
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcVectorVFPara
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDtaskHandleIn1msLoop
</UL>

<P><STRONG><a name="[95]"></a>HandleSpdSetpointRamp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, main_drive.o(i.HandleSpdSetpointRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HandleSpdSetpointRamp &rArr; ramp32GenCalc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramp32GenCalc
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_mulss
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
</UL>

<P><STRONG><a name="[a0]"></a>InitAcrDone</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, main_drive.o(i.InitAcrDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = InitAcrDone &rArr; updateAcrParaMALayer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAcrParaMALayer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNonInitResultMD2MA
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControlParaInitDone
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorAcrDataInitDone
</UL>

<P><STRONG><a name="[b0]"></a>InitObserverDone</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, main_drive.o(i.InitObserverDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitObserverDone
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateObParaMALayer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNonInitResultMD2MA
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControlParaInitDone
</UL>

<P><STRONG><a name="[b2]"></a>InitSVPWMDone</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, main_drive.o(i.InitSVPWMDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = InitSVPWMDone &rArr; updateSVPWMParaMALayer &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateSVPWMParaMALayer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNonInitResultMD2MA
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControlParaInitDone
</UL>

<P><STRONG><a name="[a8]"></a>SetDefaultMA2MD</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main_drive.o(i.SetDefaultMA2MD))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotorMain
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDriverMain
</UL>

<P><STRONG><a name="[cb]"></a>StateAlign</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, main_drive.o(i.StateAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = StateAlign &rArr; ramp32GenCalc
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreCurTrans
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setOBElectAngleEst
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDCurRefInitValue
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNeedIPD
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramp32GenCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAlignMain
</UL>

<P><STRONG><a name="[5d]"></a>StateCharge</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, main_drive.o(i.StateCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = StateCharge &rArr; StateInit &rArr; InitDQCurRefGenWithWeakenFlux &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInitAcrParaReq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorAcrDataInitDone
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeDriverMain
</UL>

<P><STRONG><a name="[a6]"></a>StateInit</STRONG> (Thumb, 542 bytes, Stack size 40 bytes, main_drive.o(i.StateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = StateInit &rArr; InitDQCurRefGenWithWeakenFlux &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreCurTrans
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinMotorVoltSpd2Core
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDQCurRefGenWithWeakenFlux
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ramp32GenInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_mulss
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotorMain
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDriverMain
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCharge
</UL>

<P><STRONG><a name="[ce]"></a>StateRun</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, main_drive.o(i.StateRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = StateRun &rArr; SpeedPIRegulator &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRunStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDCurRefGenWithEnWeakenFlux
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QCurRefGenValue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSpdSetpointRamp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPIRegulator
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCloseMain
</UL>

<P><STRONG><a name="[a1]"></a>getNonInitResultMD2MA</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main_drive.o(i.getNonInitResultMD2MA))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSVPWMDone
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitObserverDone
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAcrDone
</UL>

<P><STRONG><a name="[a7]"></a>handleIfMotorSpdZero</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main_drive.o(i.handleIfMotorSpdZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = handleIfMotorSpdZero
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotorMain
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCloseMain
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDriverMain
</UL>

<P><STRONG><a name="[df]"></a>motorAcrDataInitDone</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main_drive.o(i.motorAcrDataInitDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = motorAcrDataInitDone &rArr; InitAcrDone &rArr; updateAcrParaMALayer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAcrDone
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCharge
</UL>

<P><STRONG><a name="[a5]"></a>motorControlParaInitDone</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main_drive.o(i.motorControlParaInitDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = motorControlParaInitDone &rArr; InitSVPWMDone &rArr; updateSVPWMParaMALayer &rArr; getPWMPrd &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSVPWMDone
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitObserverDone
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAcrDone
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotorMain
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDriverMain
</UL>

<P><STRONG><a name="[d0]"></a>setFaultStatMA2UA</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main_drive.o(i.setFaultStatMA2UA))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorFaultMain
</UL>

<P><STRONG><a name="[5e]"></a>setPWMStatMA2UA</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main_drive.o(i.setPWMStatMA2UA))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotorMain
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorFaultMain
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCloseMain
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorBreakMain
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAlignMain
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeDriverMain
</UL>

<P><STRONG><a name="[102]"></a>ClrBreakInClrReq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, state_machine.o(i.ClrBreakInClrReq))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[ff]"></a>IsFaultExists</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, state_machine.o(i.IsFaultExists))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[100]"></a>IsMotorRunCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, state_machine.o(i.IsMotorRunCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[108]"></a>UARunCmd2MA</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, state_machine.o(i.UARunCmd2MA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARunCmd2MA
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseUACmdAndSetpoint
</UL>

<P><STRONG><a name="[f7]"></a>WaitPowerOnFinish</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, state_machine.o(i.WaitPowerOnFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WaitPowerOnFinish
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreVoltTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[fe]"></a>parseMD2MAInfor</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, state_machine.o(i.parseMD2MAInfor))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = parseMD2MAInfor &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Core2AppPowerTrans
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_mulss
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[fd]"></a>parseUACmdAndSetpoint</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, state_machine.o(i.parseUACmdAndSetpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = parseUACmdAndSetpoint &rArr; UARunCmd2MA
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARunCmd2MA
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMAStateMachine
</UL>

<P><STRONG><a name="[7d]"></a>CurrentAmplitudeCalc</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, fault_detection.o(i.CurrentAmplitudeCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CurrentAmplitudeCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
</UL>

<P><STRONG><a name="[7c]"></a>FaultCurrentCheckMA</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, fault_detection.o(i.FaultCurrentCheckMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FaultCurrentCheckMA
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
</UL>

<P><STRONG><a name="[80]"></a>FaultEmptyCheck</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, fault_detection.o(i.FaultEmptyCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FaultEmptyCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
</UL>

<P><STRONG><a name="[81]"></a>FaultPhaseCheck</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, fault_detection.o(i.FaultPhaseCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FaultPhaseCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
</UL>

<P><STRONG><a name="[7f]"></a>FaultStallCheck</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, fault_detection.o(i.FaultStallCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FaultStallCheck &rArr; getMotorActVoltFromObjId1ms &rArr; IQ15SqrtIQ31
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorCurFromObjId1ms
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMotorActVoltFromObjId1ms
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVolt2FreqCalcPara
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
</UL>

<P><STRONG><a name="[82]"></a>FaultStartCheck</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, fault_detection.o(i.FaultStartCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FaultStartCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
</UL>

<P><STRONG><a name="[7e]"></a>FaultVoltageCheck</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, fault_detection.o(i.FaultVoltageCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FaultVoltageCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
</UL>

<P><STRONG><a name="[b5]"></a>initUACtrlObj</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ua_interface.o(i.initUACtrlObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initUACtrlObj
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCtrlObjectPtr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsrAppLayer
</UL>

<P><STRONG><a name="[eb]"></a>UAFaultStopHandle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ua_statemachine.o(i.UAFaultStopHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UAFaultStopHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateUASetpoint
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFaultBrakeMode4UA
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UA_StateMachine
</UL>

<P><STRONG><a name="[f0]"></a>UARunCmdHandle</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ua_statemachine.o(i.UARunCmdHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARunCmdHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateUASetpoint
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGearRatio4UA
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UA_StateMachine
</UL>

<P><STRONG><a name="[d6]"></a>_DoInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[d8]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[da]"></a>_WriteBlocking</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[d9]"></a>_WriteNoCheck</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[56]"></a>CalcFluxObservePara</STRONG> (Thumb, 1192 bytes, Stack size 56 bytes, fluxobserve.o(i.CalcFluxObservePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CalcFluxObservePara &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkNomData
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_mulss
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
